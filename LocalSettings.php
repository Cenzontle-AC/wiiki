<?php
if(getenv('showPHPErrors')) {
    error_reporting( -1 );
    ini_set( 'display_errors', 1 );
}

# This file was automatically generated by the MediaWiki 1.41.1
# installer. If you make manual changes, please keep track in case you
# need to recreate them later.
#
# See includes/MainConfigSchema.php for all configurable settings
# and their default values, but don't forget to make changes in _this_
# file, not there.
#
# Further documentation for configuration settings may be found at:
# https://www.mediawiki.org/wiki/Manual:Configuration_settings


# Protect against web entry
if ( !defined( 'MEDIAWIKI' ) ) {
    exit;
}

# Load ENV vars
foreach (explode("\n", file_get_contents(__DIR__ . "/.env")) as $line) {
    if (preg_match('/^\s*([^#=\s]+)\s*=\s*["\']?(.*?)["\']?\s*$/', $line, $matches)) {
        putenv("{$matches[1]}={$matches[2]}");
    }
}

## Required Variables coming from the ENV
 
## The protocol and server name to use in fully-qualified URLs
$wgServer = getenv('wgServer'); // e.g "https://mywiki.com"

## Env settings
$wgSecretKey = getenv('wgSecretKey'); 
# Site upgrade key. Must be set to a string (default provided) to turn on the
# web installer while LocalSettings.php is in place
$wgUpgradeKey = getenv('wgUpgradeKey'); 
### Database
$wgDBtype = getenv('wgDBtype');
$wgDBserver = getenv('wgDBserver');
$wgDBname = getenv('wgDBname');
$wgDBuser = getenv('wgDBuser');
$wgDBpassword = getenv('wgDBpassword');
### Privacy
$privateNamespaceName = getenv('privateNamespaceName');
### SMPT
$smptHost = getenv('smptHost');
$smptIDHost = getenv('smptIDHost');
$smptPort = getenv('smptPort');
$smptShouldAuth_ = getenv('smptShouldAuth');
$smptShouldAuth = $smptShouldAuth_ === 'true'; # not included in env test below, but $smptShouldAuth_ is.
$smptUsername = getenv('smptUsername');
$smptPassword = getenv('smptPassword');
### Emails
$emergencyContactEmail = getenv('emergencyContactEmail');
$passwordSenderEmail = getenv('passwordSenderEmail');

### show error if required env vars ar missing
if(!($wgServer && $wgSecretKey && $wgUpgradeKey 
     && $wgDBserver && $wgDBname && $wgDBtype && $wgDBuser && $wgDBpassword 
     && $privateNamespaceName
     && $smptHost && $smptIDHost && $smptPort && $smptShouldAuth_ && $smptUsername && $smptPassword)) {
    throw new Exception("Missing env var");
    exit;
}

## Uncomment this to disable output compression
# $wgDisableOutputCompression = true;

$wgSitename = "Wiiki";
$wgMetaNamespace = "Proyecto";

## The URL base path to the directory containing the wiki;
## defaults for all runtime URL paths are based off of this.
## For more information on customizing the URLs
## (like /w/index.php/Page_title to /wiki/Page_title) please see:
## https://www.mediawiki.org/wiki/Manual:Short_URL
$wgScriptPath = "";

## The URL path to static resources (images, scripts, etc.)
$wgResourceBasePath = $wgScriptPath;

## The URL paths to the logo.  Make sure you change this from the default,
## or else you'll overwrite your logo when you upgrade!
$wgLogos = [
    '1x' => "$wgResourceBasePath/images/wiiki-logo-v0.jpg",
    'icon' => "$wgResourceBasePath/images/wiiki-logo-v0.jpg",
];

#Emailing
## UPO means: this is also a user preference option

$wgEnableEmail = true;
$wgEnableUserEmail = true; # UPO

$wgEnotifUserTalk = true; # UPO
$wgEnotifWatchlist = true; # UPO
$wgEmailAuthentication = true;

$wgSMTP = [
    'host'	=> $smptHost, 
    'IDHost'    => $smptIDHost,      
    'localhost' => $smptIDHost,      
    'port'	=> $smptPort,                
    'auth'	=> $smptShouldAuth,               
    'username'  => $smptUsername,     
    'password'  => $smptPassword       
];

$wgEmergencyContact = $emergencyContactEmail;
$wgPasswordSender = $passwordSenderEmail;


# MySQL specific settings
$wgDBprefix = "";
$wgDBssl = false;

# MySQL table options to use during installation or update
$wgDBTableOptions = "ENGINE=InnoDB, DEFAULT CHARSET=binary";

# Shared database table
# This has no effect unless $wgSharedDB is also set.
$wgSharedTables[] = "actor";

## Shared memory settings
$wgMainCacheType = CACHE_ACCEL;
$wgMemCachedServers = [];

## To enable image uploads, make sure the 'images' directory
## is writable, then set this to true:
$wgEnableUploads = true;
$wgUseImageMagick = true;
$wgImageMagickConvertCommand = "/usr/bin/convert";

# InstantCommons allows wiki to use images from https://commons.wikimedia.org
$wgUseInstantCommons = false;

# Periodically send a pingback to https://www.mediawiki.org/ with basic data
# about this MediaWiki instance. The Wikimedia Foundation shares this data
# with MediaWiki developers to help guide future development efforts.
$wgPingback = true;

# Site language code, should be one of the list in ./includes/languages/data/Names.php
$wgLanguageCode = "es";

# Time zone
$wgLocaltimezone = "America/Mazatlan";

## Set $wgCacheDirectory to a writable directory on the web server
## to make your wiki go slightly faster. The directory should not
## be publicly accessible from the web.
#$wgCacheDirectory = "$IP/cache";

# Changing this will log out all existing sessions.
$wgAuthenticationTokenVersion = "1";

## For attaching licensing metadata to pages, and displaying an
## appropriate copyright notice / icon. GNU Free Documentation
## License and Creative Commons licenses are supported so far.
$wgRightsPage = ""; # Set to the title of a wiki page that describes your license/copyright
$wgRightsUrl = "https://creativecommons.org/licenses/by-sa/4.0/";
$wgRightsText = "Creative Commons Atribución-CompartirIgual";
$wgRightsIcon = "$wgResourceBasePath/resources/assets/licenses/cc-by-sa.png";

# Path to the GNU diff3 utility. Used for conflict resolution.
$wgDiff3 = "/usr/bin/diff3";

# The following permissions were set based on your choice in the installer
$wgGroupPermissions['*']['createaccount'] = false;
$wgGroupPermissions['*']['edit'] = false;

## Default skin: you can change the default skin. Use the internal symbolic
## names, e.g. 'vector' or 'monobook':
$wgDefaultSkin = "vector";

# Enabled skins.
# The following skins were automatically enabled:
wfLoadSkin( 'MinervaNeue' );
wfLoadSkin( 'MonoBook' );
wfLoadSkin( 'Timeless' );
wfLoadSkin( 'Vector' );


# Enabled extensions. Most of the extensions are enabled by adding
# wfLoadExtension( 'ExtensionName' );
# to LocalSettings.php. Check specific extension documentation for more details.
# The following extensions were automatically enabled:
wfLoadExtension( 'CategoryTree' );
wfLoadExtension( 'Cite' );
wfLoadExtension( 'Linter' );
wfLoadExtension( 'MultimediaViewer' );
wfLoadExtension( 'Poem' );
wfLoadExtension( 'VisualEditor' );
wfLoadExtension( 'WikiEditor' );

# Additional extensions

# Privado
# Lockdown - Make private namespaces
wfLoadExtension( 'Lockdown' );
// define custom namespaces
// define constants for your custom namespaces, for a more readable configuration
define('NS_PRIVATE', 100);
define('NS_PRIVATE_TALK', 101);

$wgExtraNamespaces[NS_PRIVATE] = $privateNamespaceName; 
$wgExtraNamespaces[NS_PRIVATE_TALK] = $privateNamespaceName . '_discusión';

// restrict "read" permission to logged in users
$wgNamespacePermissionLockdown[NS_PRIVATE]['read'] = [ 'user' ];
$wgNamespacePermissionLockdown[NS_PRIVATE_TALK]['read'] = [ 'user' ];

// prevent inclusion of pages from that namespace
$wgNonincludableNamespaces[] = NS_PRIVATE;
$wgNonincludableNamespaces[] = NS_PRIVATE_TALK;

$wgNamespacesToBeSearchedDefault[NS_PRIVATE] = true; // Make Privado searchable by default (works if user is logged in)


# Debugging
$wgShowExceptionDetails = getenv('wgShowExceptionDetails') === 'true';
$wgDebugToolbar = getenv('wgDebugToolbar') === 'true';
$wgShowDebug = getenv('wgShowDebug') === 'true';
$wgDevelopmentWarnings = getenv('wgDevelopmentWarnings') === 'true';
